using NG.Localization.DL.Entities;
using NG.Localization.DO;
using NG.Localization.IF;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace NG.Localization.DL.Repository
{
    public class ControllerRepository : IControllerRepository
    {
        private eSyaEnterprise _context { get; set; }

        public ControllerRepository(eSyaEnterprise context)
        {
            _context = context;
        }

        #region Language Controller
        public async Task<List<string>> GetAllControllers()
        {
            try
            {

                //return await db.GtEcfmfd.Where(x => x.ActiveStatus == true)
                //   // .OrderBy(t=> t.ControllerName.Substring((t.ControllerName.IndexOf('/')) + 1))
                //    .Select(t => t.ControllerName.Substring((t.ControllerName.IndexOf('/')) + 1).Replace("Index","Account"))
                //    .Distinct().OrderBy(c => c).ToListAsync();

                return await _context.GtEbecnt.Where(x => x.ActiveStatus == true)
                        .Select(t => t.Controller.Replace("Index", "Account"))
                        .Distinct().OrderBy(c => c).ToListAsync();

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_LanguageController>> GetLanguageControllersbyResource(string Resource)
        {
            try
            {
                if (Resource != "All")
                {
                    return await _context.GtEcltfc.Where(x => x.ResourceName.ToUpper().Replace(" ", "") == Resource.ToUpper().Replace(" ", ""))
                      .Select(lc => new DO_LanguageController
                      {
                          ResourceId = lc.ResourceId,
                          ResourceName = lc.ResourceName,
                          Key = lc.Key,
                          Value = lc.Value,
                          ActiveStatus = lc.ActiveStatus,
                          FormId = lc.FormId
                      }).ToListAsync();
                }
                else
                {
                    return await _context.GtEcltfc
                    .Select(lc => new DO_LanguageController
                    {
                        ResourceId = lc.ResourceId,
                        ResourceName = lc.ResourceName,
                        Key = lc.Key,
                        Value = lc.Value,
                        ActiveStatus = lc.ActiveStatus,
                        FormId = lc.FormId
                    }).ToListAsync();
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertOrUpdateLanguageController(DO_LanguageController lobj)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {

                    GtEcltfc lc = _context.GtEcltfc.Where(x => x.ResourceId == lobj.ResourceId).FirstOrDefault();

                    if (lc == null)
                    {
                        GtEcltfc is_KeyExists = _context.GtEcltfc.FirstOrDefault(k => k.Key.ToUpper().Replace(" ", "") == lobj.Key.ToUpper().Replace(" ", "") && k.ResourceName.ToUpper().Replace(" ", "") == lobj.ResourceName.ToUpper().Replace(" ", ""));
                        if (is_KeyExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Key already Exists in this selected Resource." };

                        }
                        int maxval = _context.GtEcltfc.Select(c => c.ResourceId).DefaultIfEmpty().Max();
                        int ResourceId = maxval + 1;
                        lc = new GtEcltfc
                        {
                            ResourceId = ResourceId,
                            ResourceName = lobj.ResourceName.Trim(),
                            Key = lobj.Key.Trim(),
                            Value = lobj.Value.Trim(),
                            ActiveStatus = lobj.ActiveStatus,
                            FormId = lobj.FormId,
                            CreatedBy = lobj.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = lobj.TerminalID
                        };
                        _context.GtEcltfc.Add(lc);
                    }
                    else
                    {
                        GtEcltfc is_KeyExists = _context.GtEcltfc.FirstOrDefault(k => k.Key.ToUpper().Replace(" ", "") == lobj.Key.ToUpper().Replace(" ", "") && k.ResourceName.ToUpper().Replace(" ", "") == lobj.ResourceName.ToUpper().Replace(" ", "")
                        && k.ResourceId != lobj.ResourceId);
                        if (is_KeyExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Key already Exists in this selected Resource." };

                        }
                        lc.ResourceName = lobj.ResourceName.Trim();
                        lc.Key = lobj.Key.Trim();
                        lc.Value = lobj.Value.Trim();
                        lc.ActiveStatus = lobj.ActiveStatus;
                        lc.ModifiedBy = lobj.UserID;
                        lc.ModifiedOn = System.DateTime.Now;
                        lc.ModifiedTerminal = lobj.TerminalID;
                    }

                    await _context.SaveChangesAsync();
                    dbContextTransaction.Commit();

                    return new DO_ReturnParameter() { Status = true, Message = "Saved/Updated Successfully." };
                }

                catch (DbUpdateException ex)
                {
                    dbContextTransaction.Rollback();
                    throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                }
                catch (Exception ex)
                {
                    dbContextTransaction.Rollback();
                    throw ex;
                }
            }

        }

        public async Task<DO_ReturnParameter> ActiveOrDeActiveLanguageController(bool status, int ResourceId)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    GtEcltfc lan_controller = _context.GtEcltfc.Where(w => w.ResourceId == ResourceId).FirstOrDefault();
                    if (lan_controller == null)
                    {
                        return new DO_ReturnParameter() { Status = false, Message = "Language Controller is not exist" };
                    }

                    lan_controller.ActiveStatus = status;
                    await _context.SaveChangesAsync();
                    dbContextTransaction.Commit();

                    if (status == true)
                        return new DO_ReturnParameter() { Status = true, Message = "Language Controller Activated Successfully." };
                    else
                        return new DO_ReturnParameter() { Status = true, Message = "Language Controller De Activated Successfully." };
                }
                catch (DbUpdateException ex)
                {
                    dbContextTransaction.Rollback();
                    throw new Exception(CommonMethod.GetValidationMessageFromException(ex));

                }
                catch (Exception ex)
                {
                    dbContextTransaction.Rollback();
                    throw ex;
                }
            }
        }
        #endregion
    }
}
